{
  "id": "89bab4ec-ff42-4747-bc37-4596abfd4d4f",
  "parentId": "a7809e30-8468-4e1a-b22d-d1c9b0f88190",
  "rootParentId": "a7809e30-8468-4e1a-b22d-d1c9b0f88190",
  "name": "code for encoder - django",
  "auto": true,
  "contexts": [
    "codeforencoder-followup"
  ],
  "responses": [
    {
      "resetContexts": false,
      "action": "codeforencoder.codeforencoder-django",
      "affectedContexts": [],
      "parameters": [
        {
          "id": "afd0555a-17ac-4db6-960d-bedb04198c45",
          "required": false,
          "dataType": "@sys.given-name",
          "name": "given-name",
          "value": "$given-name",
          "promptMessages": [],
          "noMatchPromptMessages": [],
          "noInputPromptMessages": [],
          "outputDialogContexts": [],
          "isList": false
        }
      ],
      "messages": [
        {
          "type": 0,
          "platform": "facebook",
          "lang": "en",
          "speech": "\"content\": \" Character encoding\\n\\n\\n Example:\\n\\n    \\\"\\\"\\\"\\n    This is the encoder class for whenever you have to allow certain\\n    possibly dangerous characters into your code for i.e names such as O\u0027Reilly\\n\\t\\\"\\\"\\\"\\n\\n\\tdef encoder(allowed, input, count):\\n\\t    \\n\\t    \\\"\\\"\\\"\\n\\t    As you can see you can specify allowed characters in your function\\n\\t    \\\"\\\"\\\"\\n\\t    \\n\\t    flag \u003d True\\n\\t    match \u003d re.findall(\\\"/^[azAZ09 \\\" + allowed+\\\"]+$/\\\", input)\\n\\n\\t    if match:\\n\\n\\t        \\\"\\\"\\\"\\n\\t        Set a log for whenever there is unexpected userinput with a threat level\\n\\t        See \\\"audit logs\\\" code example for more information:\\n\\t        \\\"\\\"\\\"\\n\\n\\t        setLog(session[\u0027id\u0027], \\\"Bad userinputs\\\", \\\"FAIL\\\", datetime.utcnow(), \\\"HIGH\\\")\\n\\t        \\n\\t        \\\"\\\"\\\"\\n\\t        Set counter if counter hits 3 the users session must terminated\\n\\t        After 3 session terminations the user account must be blocked\\n\\t        See \\\"audit logs\\\" code example for more information:\\n\\t        \\\"\\\"\\\"\\n\\t        \\n\\t        counter.increment()\\n\\t        flag \u003d False\\n\\n\\t         Remove Dangerous Characters\\n\\t        wordDict \u003d {\u0027\u0026\u0027: \u0027\u0026amp;\u0027, \u0027\u003c\u0027 : \u0027\u0026lt;\u0027, \u0027\u003e\u0027 : \u0027\u0026gt;\u0027 , \u0027\\\"\u0027 : \u0027\u0026quot;\u0027, \\\"\u0027\\\" : \u0027\u0026x27;\u0027, \u0027/\u0027 : \u0026x2F;, \u0027\\\\\u0027 : \u0027\\\\\\\\\u0027}\\n\\n\\t        for key in wordDict:\\n\\t        \\tinput \u003d input.replace(key, wordDict[key])\\n\\n\\t        return input\\n\","
        },
        {
          "type": 0,
          "lang": "en",
          "speech": []
        }
      ],
      "defaultResponsePlatforms": {},
      "speech": []
    }
  ],
  "priority": 500000,
  "webhookUsed": false,
  "webhookForSlotFilling": false,
  "fallbackIntent": false,
  "events": []
}