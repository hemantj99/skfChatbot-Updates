{
  "id": "118e9056-5e52-4a74-8c2a-f66c4d388f1f",
  "name": "checklist - ASVS Level 2 - 14.0",
  "auto": true,
  "contexts": [],
  "responses": [
    {
      "resetContexts": false,
      "affectedContexts": [],
      "parameters": [],
      "messages": [
        {
          "type": 0,
          "platform": "facebook",
          "lang": "en",
          "speech": "14.0 Configuration Verification Requirements\n14.1.1 Verify that the application build and deployment processes are performed in a secure and repeatable way, such as CI / CD automation, automated configuration management, and automated deployment scripts.\n14.1.2 Verify that compiler flags are configured to enable all available buffer overflow protections and warnings, including stack randomization, data execution prevention, and to break the build if an unsafe pointer, memory, format string, integer, or string operations are found.\n14.1.3 Verify that server configuration is hardened as per the recommendations of the application server and frameworks in use.\n14.1.4 Verify that the application, configuration, and all dependencies can be re-deployed using automated deployment scripts, built from a documented and tested runbook in a reasonable time, or restored from backups in a timely fashion.\n14.2.1 Verify that all components are up to date, preferably using a dependency checker during build or compile time.\n14.2.2 Verify that all unneeded features, documentation, samples, configurations are removed, such as sample applications, platform documentation, and default or example users.\n14.2.3 Verify that if application assets, such as JavaScript libraries, CSS stylesheets or web fonts, are hosted externally on a content delivery network (CDN) or external provider, Subresource Integrity (SRI) is used to validate the integrity of the asset.\n14.2.4 Verify that third party components come from pre-defined, trusted and continually maintained repositories.\n14.2.5 Verify that an inventory catalog is maintained of all third party libraries in use.\n14.2.6 Verify that the attack surface is reduced by sandboxing or encapsulating third party libraries to expose only the required behaviour into the application. ([C2](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab\u003dFormal_Numbering))\n14.3.1 Verify that web or application server and framework error messages are configured to deliver user actionable, customized responses to eliminate any unintended security disclosures.\n14.3.2 Verify that web or application server and application framework debug modes are disabled in production to eliminate debug features, developer consoles, and unintended security disclosures.\n14.3.3 Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.\n14.4.1 Verify that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8, ISO 8859-1).\n14.4.2 Verify that all API responses contain Content-Disposition: attachment; filename\u003d\"api.json\" (or other appropriate filename for the content type).\n14.4.3 Verify that a content security policy (CSPv2) is in place that helps mitigate impact for XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities.\n14.4.4 Verify that all responses contain X-Content-Type-Options: nosniff.\n14.4.5 Verify that HTTP Strict Transport Security headers are included on all responses and for all subdomains, such as Strict-Transport-Security: max-age\u003d15724800; includeSubdomains.\n14.4.6 Verify that a suitable \"Referrer-Policy\" header is included, such as \"no-referrer\" or \"same-origin\".\n14.4.7 Verify that a suitable X-Frame-Options or Content-Security-Policy: frame-ancestors header is in use for sites where content should not be embedded in a third-party site.\n14.5.1 Verify that the application server only accepts the HTTP methods in use by the application or API, including pre-flight OPTIONS.\n14.5.2 Verify that the supplied Origin header is not used for authentication or access control decisions, as the Origin header can easily be changed by an attacker.\n14.5.3 Verify that the cross-domain resource sharing (CORS) Access-Control-Allow-Origin header uses a strict white-list of trusted domains to match against and does not support the \"null\" origin."
        },
        {
          "type": 0,
          "platform": "facebook",
          "lang": "en",
          "speech": "14.5.4 Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application."
        },
        {
          "type": 0,
          "lang": "en",
          "speech": []
        }
      ],
      "defaultResponsePlatforms": {},
      "speech": []
    }
  ],
  "priority": 500000,
  "webhookUsed": false,
  "webhookForSlotFilling": false,
  "fallbackIntent": false,
  "events": []
}