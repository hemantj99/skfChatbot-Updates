{
  "id": "aa083225-f80e-482d-8e81-041e02c1ca52",
  "name": "checklist - ASVS Level 2 - 1.0",
  "auto": true,
  "contexts": [],
  "responses": [
    {
      "resetContexts": false,
      "affectedContexts": [],
      "parameters": [],
      "messages": [
        {
          "type": 0,
          "platform": "facebook",
          "lang": "en",
          "speech": "1.0 Architecture, Design and Threat Modeling Requirements\n1.1  Secure Software Development Lifecycle Requirements\n1.1.1 Verify the use of a secure software development lifecycle that addresses security in all stages of development.\n1.1.2 Verify the use of threat modeling for every design change or sprint planning to identify threats, plan for countermeasures, facilitate appropriate risk responses, and guide security testing.\n1.1.3 Verify that all user stories and features contain functional security constraints, such as \"As a user, I should be able to view and edit my profile. I should not be able to view or edit anyone else\u0027s profile\"\n1.1.4 Verify documentation and justification of all the application\u0027s trust boundaries, components, and significant data flows.\n1.1.5 Verify definition and security analysis of the application\u0027s high-level architecture and all connected remote services. \n1.1.6 Verify implementation of centralized, simple (economy of design); vetted, secure, and reusable security controls to avoid duplicate, missing, ineffective, or insecure controls.\n1.1.7 Verify availability of a secure coding checklist, security requirements, guideline, or policy to all developers and testers.\n1.2 Authentication Architectural Requirements\n1.2.1 Verify the use of unique or special low-privilege operating system accounts for all application components, services, and servers.\n1.2.2 Verify that communications between application components, including APIs, middleware and data layers, are authenticated. Components should have the least necessary privileges needed.\n1.2.3 Verify that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches.\n1.2.4 Verify that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application.\n1.4.1 Verify that trusted enforcement points such as at access control gateways, servers, and serverless functions enforce access controls. Never enforce access controls on the client.\n1.4.2 Verify that the chosen access control solution is flexible enough to meet the application\u0027s needs.\n1.4.3 Verify enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.\n1.4.4 Verify the application uses a single and well-vetted access control mechanism for accessing protected data and resources. All requests must pass through this single mechanism to avoid copy and paste or insecure alternative paths.\n1.4.5 Verify that attribute or feature-based access control is used whereby the code checks the user\u0027s authorization for a feature/data item rather than just their role.\n1.5.1 Verify that input and output requirements clearly define how to handle and process data based on type, content, and applicable laws, regulations, and other policy compliance.\n1.5.2 Verify that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection. 1.5.3 Verify that input validation is enforced on a trusted service layer.\n1.5.4 Verify that output encoding occurs close to or by the interpreter for which it is intended. ([C4](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab\u003dFormal_Numbering))\n1.6.1 Verify that there is an explicit policy for management of cryptographic keys and that a cryptographic key lifecycle follows a key management standard such as NIST SP 800-57.\n1.6.2 Verify that consumers of cryptographic services protect key material and other secrets by using key vaults or API based alternatives."
        },
        {
          "type": 0,
          "platform": "facebook",
          "lang": "en",
          "speech": "1.6.3 Verify that all keys and passwords are replaceable and are part of a well-defined process to re-encrypt sensitive data.\n1.6.4 Verify that symmetric keys, passwords, or API secrets generated by or shared with clients are used only in protecting low risk secrets, such as encrypting local storage, or temporary ephemeral uses such as parameter obfuscation. Sharing secrets with clients is clear-text equivalent and architecturally should be treated as such.\n1.7.1 Verify that a common logging format and approach is used across the system.  ([C9](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab\u003dFormal_Numbering))\n1.7.2 Verify that logs are securely transmitted to a preferably remote system for analysis, detection, alerting, and escalation. ([C9](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab\u003dFormal_Numbering))\n1.8.1 Verify that all sensitive data is identified and classified into protection levels.\n1.8.2 Verify that all protection levels have an associated set of protection requirements, such as encryption requirements, integrity requirements, retention, privacy and other confidentiality requirements, and that these are applied in the architecture.\n1.9.1 Verify the application encrypts communications between components, particularly when these components are in different containers, systems, sites, or cloud providers. ([C3](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab\u003dFormal_Numbering))\n1.9.2 Verify that application components verify the authenticity of each side in a communication link to prevent person-in-the-middle attacks. For example, application components should validate TLS certificates and chains.\n1.10.1 Verify that a source code control system is in use, with procedures to ensure that check-ins are accompanied by issues or change tickets. The source code control system should have access control and identifiable users to allow traceability of any changes.\n1.11.1 Verify the definition and documentation of all application components in terms of the business or security functions they provide.\n1.11.2 Verify that all high-value business logic flows, including authentication, session management and access control, do not share unsynchronized state.\n1.12.1 Verify that user-uploaded files are stored outside of the web root.\n1.12.2 Verify that user-uploaded files - if required to be displayed or downloaded from the application - are served by either octet stream downloads, or from an unrelated domain, such as a cloud file storage bucket. Implement a suitable content security policy to reduce the risk from XSS vectors or other attacks from the uploaded file.\n1.14.1 Verify the segregation of components of differing trust levels through well-defined security controls, firewall rules, API gateways, reverse proxies, cloud-based security groups, or similar mechanisms.\n1.14.2 Verify that if deploying binaries to untrusted devices makes use of binary signatures, trusted connections, and verified endpoints.\n1.14.3 Verify that the build pipeline warns of out-of-date or insecure components and takes appropriate actions.\n1.14.4 Verify that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.\n1.14.5 Verify that application deployments adequately sandbox, containerize and/or isolate at the network level to delay and deter attackers from attacking other applications, especially when they are performing sensitive or dangerous actions such as deserialization. ([C5](https://www.owasp.org/index.php/OWASP_Proactive_Controls#tab\u003dFormal_Numbering))\n1.14.6 Verify the application does not use unsupported, insecure, or deprecated client-side technologies such as NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets."
        },
        {
          "type": 0,
          "lang": "en",
          "speech": []
        }
      ],
      "defaultResponsePlatforms": {},
      "speech": []
    }
  ],
  "priority": 500000,
  "webhookUsed": false,
  "webhookForSlotFilling": false,
  "fallbackIntent": false,
  "events": []
}