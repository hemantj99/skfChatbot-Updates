{
  "id": "0ea52937-3357-4a89-900c-65a151964393",
  "parentId": "a7809e30-8468-4e1a-b22d-d1c9b0f88190",
  "rootParentId": "a7809e30-8468-4e1a-b22d-d1c9b0f88190",
  "name": "code for encoder - php",
  "auto": true,
  "contexts": [
    "codeforencoder-followup"
  ],
  "responses": [
    {
      "resetContexts": false,
      "action": "codeforencoder.codeforencoder-php",
      "affectedContexts": [],
      "parameters": [],
      "messages": [
        {
          "type": 0,
          "platform": "facebook",
          "lang": "en",
          "speech": "\"content\": \" Character encoding\\n\\n\\n Example:\\n\\n\\n    \u003c?php\\n\\n\\t/*\\n\\tThis is the encoder class for whenever you have to allow certain\\n\\tpossibly dangerous characters into your code for i.e names such as O\u0027Reilly\\n\\t*/\\n\\n\\tclass encodeInput {\\n\\t\\t//As you can see you can specify allowed characters in your function\\n\\t\\tpublic function encoder($allowed, $input, $countLevel){\\n\\n\\t\\t\\t//create object for logging class\\n\\t\\t\\t$logging \u003d new logging();\\n\\n\\t\\t\\t$return \u003d true;\\n\\n\\t\\t\\tif(!preg_match(\\\"/^[azAZ09 \\\".$allowed.\\\"]+$/\\\", $input)){\\t\\t\\n\\n\\t\\t\\t\\t/*\\n\\t\\t\\t\\tSet a log for whenever there is unexpected user input with a threat level\\n\\t\\t\\t\\tSee \\\"audit logs\\\" code example for more information:\\n\\t\\t\\t\\t*/\\n\\t\\t\\t\\t$logging\u003esetLog($_SESSION[\u0027userID\u0027],\\\"Bad user inputs\\\", \\\"FAIL\\\",\\n\\t\\t\\t\\tdate(\\\"dmy\\\"), $_SESSION[\\\"privilege\\\"], \\\"HIGH\\\");\\n\\n\\t\\t\\t\\t/*\\n\\t\\t\\t\\tSet counter if counter hits 3 the users session must terminated\\n\\t\\t\\t\\tAfter 3 session terminations the user account must be blocked\\n\\t\\t\\t\\tSee \\\"audit logs\\\" code example for more information:\\n\\t\\t\\t\\t*/\\t\\t\\t\\n\\t\\t\\t\\t$logging\u003esetCounter($countLevel);\\n\\t\\t\\t\\t$input \u003d false;\\n\\t\\t\\t}\\n\\n\\t\\t\\t//We also check for the single quote since htmlspecialchar does not encode it\\n\\t\\t\\tif(preg_match(\\\"/\u0027/\\\", $input)){\\n\\t\\t\\t\\t$input \u003d preg_replace(\\\"/\u0027/\\\", \\\"\u002639;\\\", $input);\\n\\t\\t\\t}\\n\\n\\t\\t\\t//We return the input by means of htmlspecialcharacters so it becomes encoded\\n\\t\\t\\treturn htmlspecialchars($input);\\n\\t\\t}\\n\\t}//end class\\n\\n    ?\u003e\\n\","
        },
        {
          "type": 0,
          "lang": "en",
          "speech": []
        }
      ],
      "defaultResponsePlatforms": {},
      "speech": []
    }
  ],
  "priority": 500000,
  "webhookUsed": false,
  "webhookForSlotFilling": false,
  "fallbackIntent": false,
  "events": []
}