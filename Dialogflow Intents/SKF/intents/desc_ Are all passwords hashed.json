{
  "id": "287ab491-40db-498b-80d6-86757c98a5cf",
  "name": "desc_ Are all passwords hashed",
  "auto": true,
  "contexts": [],
  "responses": [
    {
      "resetContexts": false,
      "affectedContexts": [],
      "parameters": [],
      "messages": [
        {
          "type": 0,
          "lang": "en",
          "speech": "\"Solution\": \"Recommended for password usage are PBKDF functions. PBKDF2 uses a pseudorandom function and a configurable number of iterations to derive a cryptographic key from a password. Because this process is difficult to reverse (similar to a cryptographic hash function)but can also be configured to be slow to compute, key derivation functions are ideally suited for password hashing use cases.Another alternative would be bcrypt. bcrypt is a password hashing function designed by Niels Provos and David Mazi√®res, based on the Blowfish cipher, and presented at USENIX in 1999. Besides incorporating a salt to protect against rainbow table attacks, bcrypt is an adaptive function: over time, the iteration count can be increased to make it slower, so it remains resistant to bruteforce search attacks even with increasing computation power.\""
        }
      ],
      "defaultResponsePlatforms": {
        "facebook": true
      },
      "speech": []
    }
  ],
  "priority": 500000,
  "webhookUsed": false,
  "webhookForSlotFilling": false,
  "fallbackIntent": false,
  "events": []
}