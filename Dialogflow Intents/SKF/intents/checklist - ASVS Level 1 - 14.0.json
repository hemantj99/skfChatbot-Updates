{
  "id": "148f54df-b87c-460c-b529-b4c3e48870f5",
  "name": "checklist - ASVS Level 1 - 14.0",
  "auto": true,
  "contexts": [],
  "responses": [
    {
      "resetContexts": false,
      "affectedContexts": [],
      "parameters": [],
      "messages": [
        {
          "type": 0,
          "platform": "facebook",
          "lang": "en",
          "speech": []
        },
        {
          "type": 0,
          "lang": "en",
          "speech": "14.0 Configuration Verification Requirements\n14.2.1 Verify that all components are up to date, preferably using a dependency checker during build or compile time.\n14.2.2 Verify that all unneeded features, documentation, samples, configurations are removed, such as sample applications, platform documentation, and default or example users.\n14.2.3 Verify that if application assets, such as JavaScript libraries, CSS stylesheets or web fonts, are hosted externally on a content delivery network (CDN) or external provider, Subresource Integrity (SRI) is used to validate the integrity of the asset.\n14.3.1 Verify that web or application server and framework error messages are configured to deliver user actionable, customized responses to eliminate any unintended security disclosures.\n14.3.2 Verify that web or application server and application framework debug modes are disabled in production to eliminate debug features, developer consoles, and unintended security disclosures.\n14.3.3 Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components.\n14.4.1 Verify that every HTTP response contains a content type header specifying a safe character set (e.g., UTF-8, ISO 8859-1).\n14.4.2 Verify that all API responses contain Content-Disposition: attachment; filename\u003d\"api.json\" (or other appropriate filename for the content type).\n14.4.3 Verify that a content security policy (CSPv2) is in place that helps mitigate impact for XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities.\n14.4.4 Verify that all responses contain X-Content-Type-Options: nosniff.\n14.4.5 Verify that HTTP Strict Transport Security headers are included on all responses and for all subdomains, such as Strict-Transport-Security: max-age\u003d15724800; includeSubdomains.\n14.4.6 Verify that a suitable \"Referrer-Policy\" header is included, such as \"no-referrer\" or \"same-origin\".\n14.4.7 Verify that a suitable X-Frame-Options or Content-Security-Policy: frame-ancestors header is in use for sites where content should not be embedded in a third-party site.\n14.5.1 Verify that the application server only accepts the HTTP methods in use by the application or API, including pre-flight OPTIONS.\n14.5.2 Verify that the supplied Origin header is not used for authentication or access control decisions, as the Origin header can easily be changed by an attacker.\n14.5.3 Verify that the cross-domain resource sharing (CORS) Access-Control-Allow-Origin header uses a strict white-list of trusted domains to match against and does not support the \"null\" origin."
        }
      ],
      "defaultResponsePlatforms": {
        "facebook": true,
        "telegram": true
      },
      "speech": []
    }
  ],
  "priority": 500000,
  "webhookUsed": false,
  "webhookForSlotFilling": false,
  "fallbackIntent": false,
  "events": []
}